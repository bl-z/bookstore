package com.bs.admin.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.bs.admin.mapper.BookMapper;
import com.bs.admin.pojo.Author;
import com.bs.admin.pojo.Book;
import com.bs.admin.pojo.Message;
import com.bs.admin.service.AuthorService;
import com.bs.admin.service.BookService;

@RestController
@RequestMapping("bookstore")
public class BookstoreController {

	@Autowired
	private BookService bs;

	@Autowired
	private AuthorService as;
	
	/**
	 * 通过书id查询书的信息
	 */
	/*@GetMapping("{bookId}/selectBook")
	public @ResponseBody List<Book> selectBook(Book book) {
		List<Book> bookList = bs.getBookByBookInfo(book);
		System.out.println("book对象：" + book);
		return bookList;
	}*/

	/**
	 * 修改书和作者
	 */
	/*@GetMapping(value = "updateBook", produces = "text/html;charset=utf-8")
	public @ResponseBody String updateBook(Book book, Author author) {
		Integer bookRows = null; 
		Integer authorRows = null;
		if (null != book.getBookId()) {
			bookRows = bs.updateBook(book);
			System.out.println("修改了book " + bookRows + " 行");
			if(null != author.getAuthorId()){
				Integer ba = as.updateBookAuthor(book.getBookId(), author.getAuthorId());
				System.out.println("中间表bookId字段修改：" + ba + " 行");
			}
		}
		if (null != author.getAuthorId() && null != author.getAuthorName()) {
			System.out.println(author);
			authorRows = as.updateAuthor(author);
			System.out.println("修改了author " + authorRows +" 行");
		}
		return "修改了book表 " + bookRows + " 行，修改了author表 " + authorRows + " 行";
	}*/

	/**
	 * 添加书和作者
	 */
	/*@GetMapping(value = "addBook", produces = "text/html;charset=utf-8")
	public @ResponseBody String addBook(Book book, Author author) {
		Integer rows = bs.addBook(book);	
		if (null != book.getBookId() && null != author.getAuthorId()) {
			Integer ba = as.createBookAuthor(book, author);
			System.out.println("中间表添加：" + ba + " 行");
		}
		if (null != author.getAuthorName()) {
			Integer row = as.addAuthor(author.getAuthorName());
			System.out.println("添加了" + row + "位作者");
		}
		return "添加了 " + rows + " 本书";
	}*/
	
	/**
	 * 通过书id查询该书的留言/评论
	 */
	@GetMapping("{bookId}/getMessage")
	public @ResponseBody List<Message> getMessage(@PathVariable("bookId") Integer bookId){
		List<Message> message = bs.getMessageByBookId(bookId);
		System.out.println("message对象：" + message);
		return message;
	}
	
	/**
	 * 通过作者id查询该作者写的书
	 */
	@GetMapping("{authorId}/selectAuthor")
	public @ResponseBody List<Author> selectAuthor(Author author) {
		List<Author> authorList = as.queryAuthor(author);
		System.out.println("author对象：" + author);
		return authorList;
	}
}
