package com.bs.admin.socket;

import java.io.IOException;import java.security.KeyStore.Entry;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpSession;
import javax.websocket.EndpointConfig;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.PathParam;
import javax.websocket.server.ServerEndpoint;

import com.bs.admin.pojo.Admin;
import com.bs.admin.pojo.ChatMessage;
import com.bs.admin.pojo.Employee;
import com.bs.admin.util.GetHttpSessionConfigurator;
import net.sf.json.JSONObject;

@ServerEndpoint(value = "/websocket", configurator = GetHttpSessionConfigurator.class)
public class Websocket {
	private static int onlineCount = 0;
	private static Map<Admin, Websocket> clients = new ConcurrentHashMap<Admin, Websocket>();
	private static Set<String> accounts = new HashSet<String>();
	private Session session;
	private Admin admin;
	private static int id = 0;

	@OnOpen
	public void onOpen(Session session, EndpointConfig config) throws IOException {
		HttpSession httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());
		admin = (Admin) httpSession.getAttribute("admin");
		List<ChatMessage> list = new ArrayList<ChatMessage>();
		admin.setMsgs(list);

		this.session = session;

		addOnlineCount();
		clients.put(admin, this);
		accounts.add(admin.getAdminAccount());
		httpSession.setAttribute("accounts", accounts);
		System.out.println(clients);
		System.out.println("已连接");
	}

	@OnClose
	public void onClose() throws IOException {
		clients.remove(admin);
		subOnlineCount();
	}

	@OnMessage
	public void onMessage(String message) throws IOException {

		JSONObject jsonTo = JSONObject.fromObject(message);

		if (!jsonTo.get("To").equals("All")) {
			ChatMessage mes = new ChatMessage();
			mes.setFromName(admin.getAdminAccount());
			mes.setChatText(jsonTo.get("massege").toString());
			mes.setToName(jsonTo.get("To").toString());
			admin.getMsgs().add(mes);
			sendMessageTo(jsonTo.get("massege").toString(), jsonTo.get("To").toString());
			System.out.println(jsonTo.toString());
		} else {
			sendMessageAll("给所有人");
		}
	}

	@OnError
	public void onError(Session session, Throwable error) {
		error.printStackTrace();
	}

	public void sendMessageTo(String message, String To) throws IOException {
		for (Websocket item : clients.values()) {
			if (item.admin.getAdminAccount().equals(To))
				item.session.getAsyncRemote().sendText(message + "," + admin.getAdminAccount());
		}
	}

	public void sendMessageAll(String message) throws IOException {
		for (Websocket item : clients.values()) {
			item.session.getAsyncRemote().sendText(message);
		}
	}

	public static synchronized int getOnlineCount() {
		return onlineCount;
	}

	public static synchronized void addOnlineCount() {
		Websocket.onlineCount++;
	}

	public static synchronized void subOnlineCount() {
		Websocket.onlineCount--;
	}

	public static synchronized Map<Admin, Websocket> getClients() {
		return clients;
	}
}
