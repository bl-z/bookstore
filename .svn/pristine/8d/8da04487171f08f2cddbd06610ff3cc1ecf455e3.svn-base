package com.bs.admin.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.bs.admin.dao.ActivityDao;
import com.bs.admin.pojo.Activity;
import com.bs.admin.pojo.ActivityPageData;
import com.bs.admin.pojo.Book;
import com.bs.admin.pojo.BookData;
import com.bs.admin.pojo.PageData;
import com.bs.admin.service.ActivityService;
import com.bs.admin.util.JsonData;

@Repository
public class ActivityServiceImpl implements ActivityService {
	@Autowired
	private ActivityDao ad;
	
	@Override
	public List<String> getActivityNameByActivity() {
		List<Activity> allActivity = ad.getActivityNameByActivity();
		List<String> allActivityName = new ArrayList<String>();
		for (Activity activity : allActivity) {
			allActivityName.add(activity.getActivityName());
		}
		return allActivityName;
	}

	@Override
	public PageData<ActivityPageData> getActivityBookPageData(Integer pageNum, Integer pageSize) {
		// 获取总条数
		Integer total = ad.getActivityPageDataTotal();
		System.out.println("总条数" + total);
		// 获取开始位置
		Integer start = (pageNum - 1) * pageSize;
		// 获取结束位置
		Integer end = (pageNum <= (total / pageSize)) ? pageSize : total;		
		System.out.println("end---->"+end);
		return new PageData<ActivityPageData>(ad.getActivityPageData(start, end), total);
	}

	@Override
	public Boolean insertActivity(String bookName, String activityName, Integer activityDiscount, String activityStart, String activityEnd) {
		// 获取活动对象
		Activity activity=new Activity(activityName, activityDiscount, activityStart, activityEnd);	
		// 获取活动id
		Activity activityId = ad.getActivityIdByActivity(activity);
		// 判断bookName有无选择添加类型
		if(bookName==null || "".equals(bookName)) {
			// 判断是否存在这个id		
			return activityId!=null ? false:ad.insertActivity(activity)>0;			
		}else {
			// 判断此书类型的活动是否存在
			Integer idCount = ad.getIdCountByBookName(new ActivityPageData(bookName, activityName, activityDiscount, activityStart, activityEnd));
			// 获取书的id
			Integer bookId = ad.getBookIdByBookName(bookName);
			// 判断书的活动是否存在
			if(idCount>0) {
				return false;
			// 书的活动不存在,判断活动是否存在
			}else if(activityId!=null){
				// 活动存在,直接添加中间表
				return ad.insertActivityBook(activityId.getActivityId(), bookId)>0;
				// 活动不存在,添加活动,再添加中间表
			}else {
				// 添加活动
				Integer insertActivity = ad.insertActivity(activity);
				// 获取活动id
				Activity activityId2 = ad.getActivityIdByActivity(activity);
				// 添加中间表
				Integer insertActivityBook = ad.insertActivityBook(activityId2.getActivityId(), bookId);				
				return insertActivity>0 && insertActivityBook>0 ? true :false;
			}
		}
	}

	@Override
	public JsonData addActivity(String bookName, String activityName, Integer activityDiscount, String activityStart, String activityEnd) {
		// 获取活动对象
		Activity activity=new Activity(activityName, activityDiscount, activityStart, activityEnd);	
		// 获取活动id
		Activity activityId = ad.getActivityIdByActivity(activity);
		// 判断bookName有无
		 if(bookName==null || "".equals(bookName)) {
			// 判断是否存在这个id
			 if(activityId!=null) {
				 return new JsonData(null, null, "添加失败,已存在此活动信息", false);
			 }
			 if(ad.insertActivity(activity)>0) {
				 return new JsonData(null, null, "添加成功", true);
			 }else {
				 return new JsonData(null, null, "添加失败", false);
			 } 
		 }else {
			// 判断此书类型的活动是否存在
			Integer idCount = ad.getIdCountByBookName(new ActivityPageData(bookName, activityName, activityDiscount, activityStart, activityEnd));
			// 获取书的id
			Integer bookId = ad.getBookIdByBookName(bookName);
			// 判断书的活动是否存在
			if(idCount>0) {
				return new JsonData(null, null, "添加失败,已存在此活动信息", false);
			// 书的活动不存在,判断活动是否存在
			}else if(activityId!=null){
				// 活动存在,直接添加中间表
				if(ad.insertActivityBook(activityId.getActivityId(), bookId)>0) {
					return new JsonData(null, null, "添加成功", true);
				}else {
					return new JsonData(null, null, "添加关联表失败", false);
				}		
			// 活动不存在,添加活动,再添加中间表
			}else {
				// 添加活动
				Integer insertActivity = ad.insertActivity(activity);
				// 获取活动id
				Activity addActivityId = ad.getActivityIdByActivity(activity);
				// 添加中间表
				Integer insertActivityBook = ad.insertActivityBook(addActivityId.getActivityId(), bookId);	
				if(insertActivity>0&&insertActivityBook>0) {
					return new JsonData(null, null, "添加成功", true);
				}else {
					return new JsonData(null, null, "添加失败", false);
				}
			}		
		}		
	}

	
	@Override
	public Integer updateActivity(ActivityPageData ap) {	
		Activity activity = new Activity(ap.getActivityId(),ap.getActivityName(),ap.getActivityDiscount(),ap.getActivityStart(),ap.getActivityEnd());
		return ad.updateActivityByActivityId(activity);
	}

	@Override
	public JsonData deleteActivity(ActivityPageData ap) {		
		Integer addCancel = ad.addCancelActivity(ap);
		Integer bookId = ad.getBookIdByBookName(ap.getBookName());
		Integer delActivityBook = ad.deleteActivityBook(ap.getActivityId(), bookId);
		Integer delActivity = ad.deleteActivity(ap.getActivityId());		
		if(addCancel>0&&delActivityBook>0&&delActivity>0) {
			return  new JsonData("delActivity", delActivity, "删除成功", true);
		}else {
			return  new JsonData("delActivity", delActivity, "删除失败", false);
		}
	}

	@Override
	public PageData<ActivityPageData> getCancleActivity(Integer pageNum,Integer pageSize) {
		// 获取总条数
		Integer total = ad.getCancelTotal();
		System.out.println("总条数" + total);
		// 获取开始位置
		Integer start = (pageNum - 1) * pageSize;
		// 获取结束位置
		Integer end = (pageNum <= (total / pageSize)) ? pageSize : total;		
		System.out.println("end---->"+end);
		return new PageData<ActivityPageData>(ad.getCancelActivity(start, end), total);
	}
	
	@Override
	public PageData<ActivityPageData> getAllActivity(Integer pageNum, Integer pageSize, String bookName, String activityName, String activityStart, String activityEnd) {
		// 获取总条数
		Integer total = ad.getTotal(bookName, activityName, activityStart, activityEnd);
		System.out.println("总条数" + total);
		// 获取开始位置
		Integer start = (pageNum - 1) * pageSize;
		// 获取结束位置
		Integer end = (pageNum <= (total / pageSize)) ? pageSize : total;
		System.out.println("end---->" + end);
		return new PageData<ActivityPageData>(ad.getAllActivity(start, end, bookName, activityName, activityStart, activityEnd), total);	
	}

	@Override
	public PageData<Book> getAllBook(String bookName, String bookCategory, String bookStatus, Double bottomPrice, Double topPrice, Integer pageNum, Integer pageSize) {
		Integer total = ad.getAllTotal(bookName, bookCategory, bookStatus, bottomPrice, topPrice);
		System.out.println("总条数" + total);
		Integer start = (pageNum - 1) * pageSize;
		Integer end = (pageNum <= (total / pageSize)) ? pageSize : total;
		System.out.println("end---->" + end);
		return new PageData<Book>(ad.getAllBook(bookName, bookCategory, bookStatus, bottomPrice, topPrice, start, end), total);
	}

	@Override
	public JsonData insertActivity(BookData bookData) {
		Integer index =0;
		// 获取书的数据集合
		List<Book> books = bookData.getBooks();
		// 获取活动对象
		Activity activity = new Activity(bookData.getActivityName(), bookData.getActivityDiscount(), bookData.getActivityStart(), bookData.getActivityEnd());
		// 判断活动对象在表中是否存在
		Activity activityId = ad.getActivityIdByActivity(activity);
		// 活动信息不存在
		if(activityId==null) {
			// 添加活动
			Integer insertActivity = ad.insertActivity(activity);
			// 获取活动id
			Activity addActivityId = ad.getActivityIdByActivity(activity);
			// 循环中间表
			if(insertActivity>0) {
				for (int i=0;i<books.size();i++) {
					// 添加数据
					Integer bookActivity = ad.insertActivityBook(addActivityId.getActivityId(),books.get(i).getBookId());
					// 判断是否添加成功
					if(bookActivity>0) {
						index++;
					}
				}
			}else {
				return new JsonData(null, insertActivity, "添加活动时失败", false);
			}
		}else {
			for (int i=0;i<books.size();i++) {
				// 判断书的活动数据是否存在
				Integer count = ad.getIdCountByBookName(new ActivityPageData(books.get(i).getBookName(), bookData.getActivityName(), bookData.getActivityDiscount(), bookData.getActivityStart(), bookData.getActivityEnd()));
				// 大于0存在书的活动信息
				if(count>0) {
				continue;
				// 存在活动信息————>不存书的活动信息————>添加中间表
				}else{	
					// 添加中间表
					Integer bookActivity = ad.insertActivityBook(activityId.getActivityId(), books.get(i).getBookId());
					if(bookActivity>0) {
						index++;
					}	
				}
			}
		}
		if(index>0) {
			return new JsonData(null, null, "添加"+index+"条数据成功", true);
		}else {
			return new JsonData(null, null, "添加失败", false);
		}
	}

	@Override
	public JsonData deleteActivity(List<ActivityPageData> activity) {
		Integer index = 0;
		for (ActivityPageData ap : activity) {	
			// 获取bookId
			Integer bookId = ad.getBookIdByBookName(ap.getBookName());
			// 删除中间表
			Integer delActivityBook = ad.deleteActivityBook(ap.getActivityId(), bookId);
			// 获取中间表中是否还存在相关数据
			Integer count = ad.getActivityIdTotal(ap.getActivityId());
			// 不存在
			if(count==0) {
				// 删除活动信息
			 ad.deleteActivity(ap.getActivityId());
			}
			if(delActivityBook>0) {
				index++;
			}
		}
		if(index>0) {
			return new JsonData(null, null, "删除"+index+"条数据成功", true);
		}else {
			return new JsonData(null, null, "删除失败", false);
		}
	}
}
